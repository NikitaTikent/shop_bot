import psycopg2
from psycopg2 import Error

CreateTable = """\
    '''CREATE TABLE produce  
     (id_produce int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
     NAME TEXT NOT NULL,
     description TEXT NOT NULL,
     coast float,
     photo_url text,
     start_parameter text,
     payload text);'''
"""


class BaseWork:
    def __init__(self, method):
        self.method = method

        self.con = psycopg2.connect(
                  database="",
                  user="",
                  password="",
                  host="",
                  port="")
        self.cur = self.con.cursor()

    def WriteBase(self):
        try:
            self.cur.execute(self.method)
        except Error as err:
            print('Error: ', err)

        self.con.commit()
        self.cur.close()
        self.con.close()

    def DownloadBase(self):
        resultDownload = []
        try:
            self.cur.execute(self.method)
        except Error as err:
            print('Error: ', err)

        rows = self.cur.fetchall()
        for k in rows:
            resultDownload.append(k)

        self.cur.close()
        self.con.close()
        return resultDownload


class PublicDirector:
    @staticmethod
    def AddProduce(name, description, coast, photo_url, start_parameter, payload):
        method = '''insert into produce (NAME, description, coast, photo_url, start_parameter, payload) 
        values ('{}', '{}', {}, '{}', '{}', '{}')'''.format(name,
                                                            description,
                                                            coast,
                                                            photo_url,
                                                            start_parameter,
                                                            payload)
        BaseWork(method).WriteBase()

    @staticmethod
    def DownloadProduces():
        method = '''select * from produce order by id_produce'''
        Result = BaseWork(method).DownloadBase()
        return Result

    @staticmethod
    def DownloadProduce(name):
        method = '''select * from produce where name = '{}' '''.format(name)
        Result = BaseWork(method).DownloadBase()
        return Result[0]
